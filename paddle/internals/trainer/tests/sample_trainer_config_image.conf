#edit-mode: -*- python -*-
# Copyright (c) 2016 Baidu, Inc. All Rights Reserved


trainer_id = get_config_arg('trainer_id', int, 0)
local = get_config_arg('local', bool, True)

TrainData(ImgData(
    files = ("/home/dalong/work/idl/data/cifar-paddle/train.scp" if local
             else file_list[trainer_id]),
    channels = 3,
    img_size = 32,
    crop_size = 0,
    meta_file = "meta_file",
))

Settings(
    num_batches_per_send_parameter = 1,
    num_batches_per_get_parameter = 1,
    batch_size = 128,
    learning_rate = 0.01,
    learning_rate_decay_a = 1e-5,
    learning_rate_decay_b = 0.5,
)

Inputs("input", "label")
Outputs("cost")

Layer(
    name = "input",
    type = "data",
    size = 3072,
)

Layer(
    name = "layer1_1",
    type = "conv",
    active_type = "relu",
    bias = Bias(learning_rate=0.002,
        momentum=0.9,
        decay_rate=0.001,
        initial_std=0.0),
    inputs = Input("input", 
        learning_rate=0.001,
        momentum=0.9,
        decay_rate=0.001,
        initial_mean=0.0,
        initial_std=0.0001,
        conv = Conv(filter_size = 5,
             channels = 3,
             padding = 2,
             stride = 2,
             groups = 1)),
    num_filters = 16,
    shared_biases = True
)


Layer(
    name = "layer1_2",
    type = "pool",
    inputs = Input("layer1_1",
        pool = Pool(pool_type="max-projection",
            channels = 16,
            size_x = 3,
            start = 0,
            stride = 2))
)

Layer(
    name = "layer1_3",
    type = "norm",
    inputs = Input("layer1_2",
        norm = Norm(norm_type = "cmrnorm-projection",
            channels = 16,
            size = 5,
            scale = 0.001,
            pow = 0.75,
            blocked = 0))
)

Layer(
    name = "layer2_1",
    type = "conv",
    active_type = "relu",
    bias = Bias(learning_rate=0.002,
        momentum=0.9,
        decay_rate=0.001,
        initial_std=0.0),
    inputs = Input("layer1_3", 
        learning_rate=0.001,
        momentum=0.9,
        decay_rate=0.001,
        initial_mean=0.0,
        initial_std=0.01,
        conv = Conv(filter_size = 5,
             channels = 16,
             padding = 2,
             stride = 1,
             groups = 2)),
    num_filters = 32,
)

Layer(
    name = "layer3_1",
    type = "fc",
    size = 64,
    active_type = "relu",
    bias = Bias(learning_rate=0.002,
        momentum=0.9,
        decay_rate=0.001,
        initial_std=0),
    inputs = Input("layer2_1",
        learning_rate=0.001,
        momentum=0.9,
        decay_rate=0.001,
        initial_mean=0.0,
        initial_std=0.01)
)

Layer(
    name = "layer4",
    type = "fc",
    size = 10,
    active_type = "softmax",
    bias = Bias(learning_rate=0.002,
        momentum=0.9,
        decay_rate=0.001,
        initial_std=0),
    inputs = [
        Input("layer3_1",
              learning_rate=0.001,
              momentum=0.9,
              decay_rate=0.001,
              initial_mean=0.0,
              initial_std=0.1,
              format="",
              nnz=10)],
)

Layer(
    name = "layer5",
    type = "fc",
    size = 10,
    bias = Bias(initial_std=0),
    active_type = "softmax",
    inputs = FullMatrixProjection("layer4",
                                  initial_std=0.1,
                                  learning_rate=5e-2),
)

Layer(
    name = "output",
    type = "fc",
    size = 10,
    bias = Bias(initial_std=0),
    active_type = "softmax",
    inputs = FullMatrixProjection("layer5",
                                  initial_std=0.1,
                                  learning_rate=5e-2,
                                  format="",
                                  nnz=0),
)

Layer(
    name = "label",
    type = "data",
    size = 1,
)

Layer(
    name = "cost",
    type = "multi-class-cross-entropy",
    inputs = ["output", "label"],
)
