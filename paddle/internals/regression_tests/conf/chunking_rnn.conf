#edit-mode: -*- python -*-
# Copyright (c) 2016 Baidu, Inc. All Rights Reserved


import math

TrainData(ProtoData(
  files = './regression_tests/data/chunking/train_files.txt',
))

TestData(ProtoData(
  files = './regression_tests/data/chunking/test_files.txt',
))

Inputs("features", "word", "pos", "chunk")
Outputs("crf")

default_decay_rate(8e-4)

word_dim=128
hidden_dim = 128
with_rnn = True

default_initial_std(1/math.sqrt(hidden_dim))
default_device(0)

Layer(
    name = "features",
    type = "data",
    size = 76328,
)

Layer(
    name = "word",
    type = "data",
    size = 6778,
)

Layer(
    name = "pos",
    type = "data",
    size = 45
)

Layer(
    name = "chunk",
    type = "data",
    size = 23
)


Layer(
    name = "word_embedding",
    type = "mixed",
    size = word_dim,
    bias = False,
    inputs = TableProjection("word", initial_std=0),
)

Layer(
    name = "hidden1",
    type = "mixed",
    size = hidden_dim,
    active_type = "stanh",
    bias = True,
    inputs = [
        FullMatrixProjection("word_embedding"),
        TableProjection("pos"),
    ]
)

if with_rnn:
    Layer(
        name = "rnn1",
        type = "recurrent",
        active_type = "relu",
        bias = Bias(initial_std=0),
        inputs = Input("hidden1", initial_std=0, learning_rate=1),
    )

Layer(
    name = "hidden2",
    type = "mixed",
    size = hidden_dim,
    active_type = "stanh",
    inputs = [
        FullMatrixProjection("hidden1"),
    ] + ([
        FullMatrixProjection("rnn1", initial_std=0, learning_rate=1)
    ] if with_rnn else []),
)

if with_rnn:
    Layer(
        name = "rnn2",
        type = "recurrent",
        reversed = True,
        active_type = "relu",
        bias = Bias(initial_std=0),
        inputs = Input("hidden2", initial_std = 0, learning_rate=1),
    )

Layer(
    name = "output",
    type = "mixed",
    size = 23,
    bias = False,
    inputs = [
        FullMatrixProjection("hidden2"),
    ] + ([
        FullMatrixProjection("rnn2", initial_std=0, learning_rate=1)
    ] if with_rnn else []),
)

Layer(
    name = "crf",
    type = "crf",
    size = 23,
    device = -1,
    inputs = [
        Input("output", parameter_name="crfw"),
        "chunk"
    ]
)

Layer(
    name = "crf_decoding",
    type = "crf_decoding",
    size = 23,
    device = -1,
    inputs = [
        Input("output", parameter_name="crfw"),
        "chunk"
    ]
)

Evaluator(
    name = "error",
    type = "sum",
    inputs = "crf_decoding",
)

Evaluator(
    name = "chunk_f1",
    type = "chunk",
    inputs = ["crf_decoding", "chunk"],
    chunk_scheme = "IOB",
    num_chunk_types = 11,
)

Settings(
    algorithm = 'sgd',
    batch_size = 100,
    average_window = 0.5,
    max_average_window = 2500,
    learning_rate = 5e-3,
    learning_rate_decay_a = 5e-7,
    learning_rate_decay_b = 0.5,
    l1weight = 0,
    l2weight = 25,
    c1 = 0.0001,
    backoff = 0.5,
    owlqn_steps = 100,
    max_backoff = 5,
)
